# Process with autom4te to create an -*- Autotest -*- test suite.


# ------------------------------
#

AT_INIT([expr-test])
# AT_COPYRIGHT([])

# AT_TESTED([expr-test])

# Usage: _AT_TEST_*(<flags>, <expr source>, <constraint>, <baseline file>)

m4_define([_AT_EXPR_TEST],   
[AT_BANNER([Test $1 $2 $3])
AT_SETUP([EXPR $1])
AT_KEYWORDS([expr])
#Added || true because the $srcdir/expr-test -p < $1 needs to be true whether the
#output is printed to stdout or stderr
AT_CHECK([$srcdir/expr-test $1 $2 -k $3 -f "dummy" || true], [], [stdout], [stderr])
#Need to compare either stdout or stderr because of the directory the above
#AT_CHECK prints output to
AT_CHECK([diff -b -B $4 stdout || diff -b -B $4 stderr], [], [ignore],[],[])
AT_CLEANUP])


m4_define([AT_EXPR_RESPONSE_TEST_P],
[AT_BANNER([EXPR response for $1, $2.])
_AT_EXPR_TEST([-w], [$srcdir/expr-testsuite/$1], [$2], [$srcdir/expr-testsuite/$3.base])
_AT_EXPR_TEST([-W], [$srcdir/expr-testsuite/$1], [$2], [$srcdir/expr-testsuite/$3.base])
])

m4_define([AT_EXPR_RESPONSE_TEST_B],
[AT_BANNER([EXPR response for $1, $2.])
_AT_EXPR_TEST([-b -w], [$srcdir/expr-testsuite/$1], [$2], [$srcdir/expr-testsuite/$3.base])
_AT_EXPR_TEST([-b -W], [$srcdir/expr-testsuite/$1], [$2], [$srcdir/expr-testsuite/$3.base])
])

AT_EXPR_RESPONSE_TEST_P([test.1], [i], [test.1])
AT_EXPR_RESPONSE_TEST_P([test.1], [i,j], [test.1a])
AT_EXPR_RESPONSE_TEST_P([test.1], ['i,j&i=j'], [test.1b])
#AT_EXPR_RESPONSE_TEST_P([test.1], ['i,j&i<j'], [test.1c])
AT_EXPR_RESPONSE_TEST_P([test.1], ['i&i=j'], [test.1d])
AT_EXPR_RESPONSE_TEST_P([test.2], [s1], [test.2])
AT_EXPR_RESPONSE_TEST_P([test.2], [s2], [test.2a])
AT_EXPR_RESPONSE_TEST_P([test.2], [s2,s3], [test.2b])
AT_EXPR_RESPONSE_TEST_P([test.2], [s2[[2:2:4]],s3.o], [test.2c])
AT_EXPR_RESPONSE_TEST_P([test.2], [s2[[2:2:4]].m], [test.2d])
AT_EXPR_RESPONSE_TEST_P([test.2], [s2[[2:2:4]].m,s2[[2:2:4]].l], [test.2e])
AT_EXPR_RESPONSE_TEST_P([test.2], [s2[[2:4]].m[[0:4]],s2[[2:4]].l[[0:5]]], [test.2f])
AT_EXPR_RESPONSE_TEST_P([test.3], [i[[1:10]]], [test.3])
AT_EXPR_RESPONSE_TEST_P([test.4], [s & s =~ "^Silly.*"], [test.4])
AT_EXPR_RESPONSE_TEST_P([test.4], ["s&s=~\"Very\""], [test.4a])
AT_EXPR_RESPONSE_TEST_P([test.5], [g[[0:2:4]][[0]][[0]]], [test.5])
AT_EXPR_RESPONSE_TEST_P([test.5], [g[[0:2:4]][[0:2:4]][[0:2:4]]], [test.5a])
AT_EXPR_RESPONSE_TEST_P([test.6], [i], [test.6])
AT_EXPR_RESPONSE_TEST_P([test.6], [i[[1:2]][[2:4]]], [test.6a])
AT_EXPR_RESPONSE_TEST_P([test.5], [g.val[[0:1]][[0:1]][[0:1]]], [test.5b])


AT_EXPR_RESPONSE_TEST_B([test.61], [i], [data.61a])
AT_EXPR_RESPONSE_TEST_B([test.61], [ i[[0:2]][[0:2]] ], [data.61b])
AT_EXPR_RESPONSE_TEST_B([test.61], [ i[[1:2]][[0:2]] ], [data.61c])
AT_EXPR_RESPONSE_TEST_B([test.61], [ i[[1:2]][[1:2]] ], [data.61d])

###############################################################

AT_EXPR_RESPONSE_TEST([data.61a])
AT_EXPR_RESPONSE_TEST([data.61b])
AT_EXPR_RESPONSE_TEST([data.61c])
AT_EXPR_RESPONSE_TEST([data.61d])
AT_EXPR_RESPONSE_TEST([data.z0])
AT_EXPR_RESPONSE_TEST([data.z1])
AT_EXPR_RESPONSE_TEST([data.z2])
AT_EXPR_RESPONSE_TEST([data.z3])
AT_EXPR_RESPONSE_TEST([data.z4])
AT_EXPR_RESPONSE_TEST([data.z5])
AT_EXPR_RESPONSE_TEST([data.z6])
AT_EXPR_RESPONSE_TEST([data.z7])
AT_EXPR_RESPONSE_TEST([data.zz0])
AT_EXPR_RESPONSE_TEST([data.zz1])
AT_EXPR_RESPONSE_TEST([data.zz2])
AT_EXPR_RESPONSE_TEST([test.1])
AT_EXPR_RESPONSE_TEST([test.2])
AT_EXPR_RESPONSE_TEST([test.2a])
AT_EXPR_RESPONSE_TEST([test.3])
AT_EXPR_RESPONSE_TEST([test.4])
AT_EXPR_RESPONSE_TEST([test.5])
AT_EXPR_RESPONSE_TEST([test.6])
AT_EXPR_RESPONSE_TEST([test.61])
AT_EXPR_RESPONSE_TEST([test.7])
AT_EXPR_RESPONSE_TEST([test.8])
AT_EXPR_RESPONSE_TEST([test.9])
AT_EXPR_RESPONSE_TEST([test.a])
AT_EXPR_RESPONSE_TEST([test.b])
AT_EXPR_RESPONSE_TEST([test.c0])
AT_EXPR_RESPONSE_TEST([test.c1])
AT_EXPR_RESPONSE_TEST([test.c2])
AT_EXPR_RESPONSE_TEST([test.c3])
AT_EXPR_RESPONSE_TEST([test.c4])
AT_EXPR_RESPONSE_TEST([test.cc0])
AT_EXPR_RESPONSE_TEST([test.cc1])
AT_EXPR_RESPONSE_TEST([test.d])

